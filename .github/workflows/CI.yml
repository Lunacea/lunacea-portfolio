# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# yaml-language-server: $schema=https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/schemas/json/github-workflow.json
name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      skip-tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean
      skip-e2e:
        description: 'Skip E2E tests'
        required: false
        default: false
        type: boolean

# 並行実行制御: 同一ブランチでの重複実行を防止
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 最小権限の原則: 各Jobで必要な権限のみを個別に設定
permissions:
  contents: read
  security-events: write

# 環境変数は各ステップで直接参照（警告抑制のため）

jobs:
  # 並列実行可能なJob群
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Setup Bun Environment
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-lint-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-lint-
            ${{ runner.os }}-bun-
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Run linting
        run: bun run lint --max-warnings 0
      
      - name: Run type checking
        run: bun run typecheck
      
      - name: Upload lint results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results-${{ github.sha }}
          path: |
            .eslintcache
            tsconfig.tsbuildinfo
          retention-days: 7
          if-no-files-found: warn

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ !inputs.skip-tests }}
    permissions:
      contents: read
    strategy:
      matrix:
        node-version: [18, 20]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Setup Bun Environment
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-test-${{ matrix.node-version }}-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-test-${{ matrix.node-version }}-
            ${{ runner.os }}-bun-test-
            ${{ runner.os }}-bun-
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Run tests
        run: bun run test -- --coverage
      
      # Codecovは使用していないためコメントアウト
      # - name: Upload coverage reports to Codecov
      #   if: ${{ env.CODECOV_TOKEN != '' }}
      #   uses: codecov/codecov-action@v5
      #   env:
      #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.node-version }}-${{ github.sha }}
          path: |
            test-results/
            coverage/
          retention-days: 7
          if-no-files-found: warn

  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint, test]
    if: always() && (needs.lint.result == 'success' && (needs.test.result == 'success' || needs.test.result == 'skipped'))
    permissions:
      contents: read
    outputs:
      build-id: ${{ steps.build-info.outputs.build-id }}
      build-size: ${{ steps.build-info.outputs.build-size }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Setup Bun Environment
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-build-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-build-
            ${{ runner.os }}-bun-
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Build application
        id: build
        run: bun run build
      
      - name: Extract build information
        id: build-info
        run: |
          if [ -f ".next/BUILD_ID" ]; then
            BUILD_ID=$(cat .next/BUILD_ID)
            echo "build-id=$BUILD_ID" >> $GITHUB_OUTPUT
          fi
          BUILD_SIZE=$(du -sh .next/ | cut -f1)
          echo "build-size=$BUILD_SIZE" >> $GITHUB_OUTPUT
          echo "Build ID: $BUILD_ID"
          echo "Build Size: $BUILD_SIZE"
          echo "Build output structure:"
          ls -la .next/
          if [ -d ".next/standalone" ]; then
            echo "Standalone build found"
            ls -la .next/standalone/
          fi
      
      - name: Verify build output
        run: |
          echo "Build output contents:"
          ls -la .next/
          echo "BUILD_ID exists: $([ -f ".next/BUILD_ID" ] && echo "YES" || echo "NO")"
      
      - name: Archive build output
        if: success()
        run: |
          tar -czf build-artifacts-${{ github.sha }}.tgz .next

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-output-${{ github.sha }}
          path: build-artifacts-${{ github.sha }}.tgz
          retention-days: 7
          if-no-files-found: error

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    if: ${{ !inputs.skip-e2e && needs.build.result == 'success' }}
    permissions:
      contents: read
    strategy:
      matrix:
        shardIndex: [1, 2, 3, 4, 5]
        shardTotal: [5]
        browser: [chromium, firefox, msedge]
      fail-fast: false
      max-parallel: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Setup Bun Environment
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-e2e-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-e2e-
            ${{ runner.os }}-bun-
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Download build artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output-${{ github.sha }}
          path: .
        continue-on-error: true

      - name: Extract build artifact
        run: |
          if [ -f "build-artifacts-${{ github.sha }}.tgz" ]; then
            tar -xzf build-artifacts-${{ github.sha }}.tgz
          else
            echo "No build artifact found; proceeding without prebuilt output"
          fi
      
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~/.cache/ms-playwright-browsers
          key: ${{ runner.os }}-playwright-${{ matrix.browser }}-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-playwright-${{ matrix.browser }}-
            ${{ runner.os }}-playwright-
      
      - name: Install Playwright browsers
        run: |
          # CI環境では必要なブラウザのみをインストールして高速化
          # --with-depsを削除してシステム依存関係のインストールをスキップ
          bunx playwright install ${{ matrix.browser }}
      
      - name: Run E2E tests
        run: bunx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }} --workers=2 --reporter=blob
        env:
          ARCJET_ENV: "development"
          NODE_ENV: "test"
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: "test-key"
          NEXT_PUBLIC_CLERK_SIGN_IN_URL: "http://localhost:3000/sign-in"
          # BGMプレイヤーのテスト用環境変数
          NEXT_PUBLIC_ENABLE_BGM: "true"
          NEXT_PUBLIC_BGM_AUTOPLAY: "false"
          NEXT_PUBLIC_BGM_VOLUME: "0.5"
          # ビジュアルテスト用環境変数
          NEXT_PUBLIC_DISABLE_BGM_MODAL: "true"
      
      - name: Upload blob report
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.browser }}-${{ matrix.shardIndex }}-${{ github.sha }}
          path: blob-report
          retention-days: 1
          if-no-files-found: warn

  merge-reports:
    name: Merge Test Reports
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [e2e]
    if: ${{ !cancelled() && needs.e2e.result != 'skipped' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Setup Bun Environment
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Download blob reports
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true
        continue-on-error: true
      
      - name: Merge into HTML Report
        run: bunx playwright merge-reports --reporter html ./all-blob-reports
        continue-on-error: true
      
      - name: Upload merged HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-html-report-${{ github.sha }}
          path: playwright-report
          retention-days: 14
          if-no-files-found: warn

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    if: needs.build.result == 'success'
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Trivy vulnerability scanner
        id: trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Fail on high severity vulnerabilities
        if: failure()
        run: |
          echo "❌ High severity vulnerabilities detected. Please review and fix them."
          echo "Scan results: ${{ steps.trivy.outputs.output }}"
          exit 1
      
      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results-${{ github.sha }}
          path: trivy-results.sarif
          retention-days: 30
          if-no-files-found: warn
