# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# yaml-language-server: $schema=https://raw.githubusercontent.com/SchemaStore/schemastore/master/src/schemas/json/github-workflow.json
name: CD Pipeline

on:
  workflow_run:
    workflows: [CI]
    types: [completed]
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      skip-migrations:
        description: 'Skip database migrations'
        required: false
        default: false
        type: boolean

# 最小権限の原則: 各Jobで必要な権限のみを個別に設定
permissions:
  contents: read
  deployments: write
  packages: read

# 環境変数は各ステップで直接参照（警告抑制のため）

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    timeout-minutes: 25
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    environment: 
      name: ${{ inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.deployment-url }}
    permissions:
      contents: read
      deployments: write
      packages: read
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
      deployment-status: ${{ steps.deploy.outputs.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Setup Bun Environment
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-cd-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-cd-
            ${{ runner.os }}-bun-
      
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Download build artifacts from CI
        uses: actions/download-artifact@v4
        with:
          name: build-output-${{ github.sha }}
          path: .next/
        continue-on-error: true
      
      - name: Build application (if artifacts not available)
        if: failure()
        run: bun run build
      
      - name: Deploy to ${{ inputs.environment || 'production' }}
        id: deploy
        run: |
          echo "🚀 Deploying to ${{ inputs.environment || 'production' }} with Nixpacks..."
          echo "deployment-url=https://${{ inputs.environment || 'production' }}.your-app.com" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT
          # ここでNixpacksデプロイコマンドを実行
          # 例: nixpacks deploy または プラットフォーム固有のデプロイコマンド
        # デプロイに必要な環境変数はワークフローレベルで定義済み
      
      # データベースマイグレーションは使用していないためコメントアウト
      # - name: Run Prisma migrations
      #   if: success() && !inputs.skip-migrations
      #   run: |
      #     echo "🔄 Running database migrations..."
      #     if [ -n "$DATABASE_URL" ]; then
      #       bun run db:migrate
      #     else
      #       echo "⚠️ DATABASE_URL not set, skipping migrations"
      #     fi
      #   env:
      #     DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: Health check
        if: success()
        run: |
          echo "🏥 Performing health check..."
          # デプロイ後のヘルスチェック
          # 例: curl -f https://${{ inputs.environment || 'production' }}.your-app.com/api/health
      
      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ inputs.environment || 'production' }}',
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: '${{ steps.deploy.outputs.status }}',
              environment_url: '${{ steps.deploy.outputs.deployment-url }}'
            });
